一 Servlet生命周期
  Servlet是由tomcat创建的
  1.默认情况下，第一次访问Servlet时（startup)，tomcat会实例化Servlet
     （可以改为在tomcat启动时就实例化Servlet:
       在web.xml中写<load-on-startup>1</load-on-startup>
       --启动时加载（实例化+初始化）此Servlet,中间的数字代表多个Servlet间加载顺序）
  2.并调用init（）（该方法的调用时机是在调用构造器之后）方法给实例化的Servlet初始化
  3.浏览器发出请求，tomcat调用service()实例化的Servlet。
  4.关闭(shutdown)tomcat时，tomcat调用destroy()方法销毁。
 
  调用可执行多次,但Servlet的类只被实例化一次，它是单例（单个实例）的。
    tomcat启动与关闭仅只有一次，因此每个对象仅有一个实例。
  
二 ServletConfig与ServletContext
   1.他们的作用
     图片
   2.他们的区别  
    给Servlet配置参数的方法
    (1)自己想办法给Servlet预置参数 
    (2)用默认的配置文件及对象给Servlet配置参数
       ServletConfig ServletContext
        --Sun公司提供的，均可以在web.xml中读取数据，并传给Servlet使用
    1）ServletConfig与Servlet是一对一的关系
       ServletContext与Servlet是一对多的关系
    2）tomcat在初始化每一个Servlet之前，都会先为其创建一个ServletConfig
       tomcat在启动时会自动创建唯一的一个ServletContext
    如：AServlet是一个实例，有对应的一个config
        HelloServlet是一个实例，有对应的一个config
    3）Servlet私有的数据存入它对应的config
       所有Servlet共用的数据存入context
   3.他们典型的使用场景
     1）config
       假设要做一个网页游戏，要限制最大在线人数，当在前人数过多时，超出的人需要排队
       登录时就要判断是否达到最大在线人数
       写登录功能LoginServlet,
       最大在线人数（maxOnline）需要可配.该参数仅登录时使用，存入config即可
     2)context
        一个项目往往包括多个查询功能，每个查询功能都要分页（已知：page,size)
        每页显示条目数（size)需要可配置
        模拟：FindDeptServlet,FindEmpServlet，在这两个查询功能内都读取size，
        size是多个Servlet之间公用的数据，存入context
        
   4.获取方法
     config: getServletConfig(),返回一个config对象 
     context:ServletContext ctx = getServletContext();
   5.在web.xml中配置参数的方法 一个标签只能配置一个参数
     1）config
        <init-param>
          <param-name></param-name>
          <param-value></param-value>
        </init-param> 
       在Servlet内部配置的参数，只对这个Servlet有效，
       该参数由这个Servlet对应的config对象自动读取
       config.getInitParameter("maxOnline");
     2)context:
        <context-param>
          <param-name>size</param-name>
          <param-value>10</param-value>
        </context-param>
      参数写在所有Servlet之外，所以可以被所有的Servlet公用，
      在tomcat启动时自动创建了context对象，并调用了该对象
      读取了这些共用的参数，所以最终这些参数存入了context对象内部
      context.getInitParameter("size");
   6.context的特殊用途
     1）用途
        不但可以读取常量（web.xml中配置的参数），也可用来存取变量，被所有Servlet公用
     2）案例
        统计项目的流量（访问量），流量是变量，无论访问哪个功能，它都要+1
     3）设置变量的方法：
          ServletContext ctt = getServletContext();
          ctt.setAttribute("count", 0);
       获得变量的方法：
         ServletContext ctt = getServletContext();
         Integer count = (Integer)ctt.getAttribute("count");
      
三 Servlet线程安全问题
   1.什么时候可能出现线程安全问题？
     1）多个线程同时修改局部变量
          局部变量存于栈内，每个线程有自己的栈帧。
     2）多个线程同时修改成员变量
          成员变量存于堆中，多个线程共享堆内数据。此时会存在线程安全问题
   2.解决方案
     解决方案很简单--加锁  
四  Servlet层次结构
   1.Servlet类层次结构   
    GenericServlet实现Servlet，HttpServlet继承GenericServlet，UpServlet继承
      GenericServlet
    HttpServletRequest继承ServletRequest,HttpServletResponse继承ServletResponse
    这样设计的好处是，将来万一HTTP协议不流行了，sun只需要置换以HTTP开头的类和口。
    接口HttpServletRequest和HttpServletResponse由tomcat提供实现类（它是谁不用管），tomcat
      在调用Service()方法时，传入的是它所提供的实现类的实例 
    2.HttpServlet结构
      UpServlet继承HttpServlet,浏览时调用public void service()方法，子类没有，去父类找，
     用父类方法转到子类有的protected void service()。用get方法时有doGet(),用post方法有
     doPost(),里面没有内容，只有抛出异常。
    sun这样设计的目的是为了给程序员更多选择的空间。doXXX()中抛异常是为了强制程序员重写它
    一般重写protected void service()并且会去掉super.service()。目的是避免调用doXXX(),避免
      抛异常    
      
 补：一般的web项目里都会有1个或多个Servlet,它不负责处理任何请求，
        仅仅是在tomcat启动时初始化一些数据。
    init（）方法设计的初衷就是用来初始化数据的。
    tomcat启动时会优先创建context对象，然后再按照顺序创建Servlet
