
JSP（Java Server Page）
 SUN公司制定的一种服务器端动态页面技术的组件规范。是一个以.jsp为后缀的文件，无需配置
 主要包含网页与Java，为网页中写Java
 JSP与Servlet作用一样
 Servlet是在java中写标签，jsp是在标签中写java
 
 
一 如何编写JSP
  1.注释方法：
      <!-- -->只有内容可以，但有java会被执行
      <%-- --%>均可
  2.JSP页面中的Java代码  可编写在页面的任意位置 作用：控制页面中可变内容的产生
      有三种，主要是前两种
    1）JSP表达式：要输出的变量等，里面不能写分号
        <%=表达式%> 返回表达式的结果  
        转译成Servlet时的规则：在service()方法中用out.print语句输出该变量，表达式，方法的值
    2）JSP脚本：完整的java代码段
        <% 脚本 %>  
        转译成Servlet时的规则：原封不动的成为Servlet类的service()方法里面的一段代码
    3）JSP声明：声明成员属性或方法
        <%! 声明 %>
        不建议使用，建议写一个类，在类中写方法，import这个类
  3.JSP页面中的指令：语法规范：<%@指令名  属性=值 %>
    1)page指令：用于导包，设置页面属性
       pageEncoding:声明此文件的编码---<%@page pageEncoding = "utf-8"%>
       contentType:告诉浏览器给它发送的是什么格式的内容<%@page contentType="text/html"%>
       import：导包--<%@page import = "java.util.*,java.sql.*"%>
    2)include指令：在一个JSP中引入另一个JSP--引入一个jsp,相当于将jsp的内容复制到此处
       语法：<%@ include file = "url" %>
    3)taglib指令
    
    
二 JSP运行原理--与Servlet运行原理相似
   1.理解：JSP本质上就是Servlet.
      建立连接->打包数据->发送数据->拆包数据->创建对象（request response）->查找jsp文件
    ->根据jsp文件翻译成Servlet->调用service()方法->响应->打包数据->发送数据-> 拆包->关闭
      jsp只需第一次调用时翻译。
      配置指令pageEncoding = "utf-8"在翻译成Servlet时使用
    配置指令contentType = "text.html"在浏览器拆包时使用，与response.getcontentType()一样
          一般不用写，因为默认值就是text/html，charset默认和Encoding一致
   
   2.jsp转为Servlet过程
     1.创建Java
     2.翻译：声明变量->write标签->保留脚本->print表达式
        要声明的变量有9个：
        1）这些变量是翻译前声明的，所以可以在脚本和表达式里直接使用
        2）jsp中可以直接使用这些变量，因为在jsp中的java代码执行前变量已经声明好了。
        3）因为这些变量可以直接使用，所以称之为隐含（内置）对象
     3.编译
   3.jsp页面中的隐含（内置）对象--9个(背过)
       容器（服务器）自动创建，在jsp文件中可以直接使用的对象
      1)request（*）
         HttpServletRequest
      2)response
         HttpServletResponse
      3)out
         JSPWriter  与PrintWriter一样
      4)config
         ServletConfig
      5)application
         ServletContext
      6)exception
         Throwable 是jsp翻译生成的Servlet所抛出的异常，只有jsp上有错误时才会出现才能使用
      7)session（*）
         HttpSession  之后讲
      8)page
         Object   指代当前调用的那个翻译生成的Servlet，相对于在Servlet中的this
      9)pageContext（*）
         PageContext  管理其他的内置对象，通过此对象可以获得其他的8个内置对象
   4.在jsp上如何使用内置对象
     <%String user = request.getParameter("user");%>
     <%=session.getAttribute()%>
三 开发模式
   1.Model 1
       浏览器发出请求，服务器通过Servlet/JSP接收，Servlet/JSP调用Dao获取DB(数据库）信息并
     返回给Servlet/JSP，服务器响应浏览器.
     缺点：使用一个组件，即处理请求，又展现数据，将java与HTML高度耦合在一起，该组件不好维护
   2.Model 2
       浏览器发出请求，服务器通过Servlet（C）接收，Servlet调用Dao（M）获取DB(数据库）信息并
     返回给Servlet，Servlet转发给JSP（V），服务器响应浏览器.
     
       引入了MVC模式对代码进行了分层（解耦）
       MVC是经典的设计模式，是代码的分层思想：

       M：Model 业务层 用来处理业务
       V：View  视图层 用来展现数据
       C：Controller 控制层 负责调度，是业务层和视图层的桥梁
       MVC目的是将代码解耦，便于团队开发及维护
四 转发  即Servlet（控制层）转发给JSP（视图层）
   转发：转发:请求没有处理完，而是转交给JSP继续完成
   1.1）将数据绑定到request上
        request.setAttribute("emps",list);
     2)将请求转发给JSP，并将request和response一起给JSP
        req.getRequestDispatcher("emp_list.jsp").forward(req,res);
     3)在JS中调用request
        List<Emp> list = (List<Emp>)request.getAttribute("emps");
   在Model2模式下，不要直接访问jsp，要访问Servlet。
五 转发和重定向的区别和联系
   1.他们的共同点
     都是解决2个WEB组件和跳转问题  WEB组件：Servelt/JSP
   2.他们的区别（面试题）
     1）通俗的理解（图片）
        两者依赖时用转发，不依赖时重定向
     2）专业的理解（面试回答，背过）
        转发的特点：
        1.一次请求
        2.浏览器地址不变
        3.2个组件共用一个request，可以通过request共享数据
        4.只能转发给项目内部的组件    
        重定向的特点：
        1.两次请求
        2.浏览器地址发生改变
        3.2个组件使用两个request,不能通过request共享数据
        4.可以重定向到项目之外的组件
   3.一般的使用场景
     ---查询时使用转发。
     ---增加，修改，删除以后重定向到查询
六 EL，JSTL---目的：改善JSP的开发，让JSP中彻底没有java语句     
   EL：能够取数与显示数据（类似JSP表达式），从此在jsp中不用在import
   1.EL表达式的作用：
    1)访问Bean的属性
       <p> 姓名：${stu.name}</p> 等价于request.getAttribute("stu").getName()
     或 年龄：${stu["age"] } 等价于request.getAttribute("stu").getAge()
        注：对象中定义的变量是对象属性
         Bean的属性（get方法）：去掉get并将首字母小写所得到的单词就是Bean属性
      EL默认从4个内置对象中取值，这些对象是EL的默认取值范围：
      pageContext,request,session,application，并且EL会按照次序依次从4个对象取值。
      都没有，返回空值，不然返回第一个有的。
      若想打破此规则，一定要从某对象中取值：sessionScope.stu.sex  responseScope.stu.sex
      
    2)输出简单的运算结果--将结果直接输出或给JSP标签的属性赋值
     例：<p>年龄+3：${stu.age+3 }</p>       ---年龄+3：28
        <p>年龄范围:${stu.age>20 && stu.age<30 }</p>  ---年龄范围:true
        <p>判空：${empty stu }</p>    ---判空：false
    
    3)获取请求参数值
     例：${param.user }  等价于request.getParameter("user")
         ${paramValues.city} 等价于request.getParameterValues("city")
   2.JSTL(JSP标准标签库）：能够处理数据（类似JSP脚本）
     1）如何使用JSTL
        step1:导包--在pom.xml中导入jstl jstl下的1.2[jar]
        step2:使用taglib指令导入要使用的JSP标签
               <%@taglib uri = "" prefix = "" %>  uri:资源的真名  prefix:前缀
     2）核心标签
        --if标签
           例：<c:if test="${stu.sex=='M'}">男</c:if>
        --choose标签  ---可以写多个when
           例：<c:choose>
                 <c:when test = "${stu.sex=='M'}">男</c:when>
                 <c:otherwise>女</c:otherwise>
              </c:choose>
        --forEach标签  用来遍历集合或数组
           例： <c:forEach  items = "${stu.interests}" var = "i" >
                   ${i}
               </c:forEach>
   表达式依赖脚本   EL，JSTL互相依赖 
  
补：PrinterWriter的writer()方法只能写字符串，print()方法可以写声明的变量等；  
   在MVC模式下，Servlet处理请求的步骤大致如下
   1.接收参数
   2.根据参数处理业务
   3.重定向或转发
 EL默认从4个对象中取值：
  pageContext,request,session,application  
  
  
  
  
  
  
day02
  一个标签背后是一个类
一 标签的运行原理  
     浏览器发出请求，服务器通过Servlet（C）接收，Servlet调用Dao（M）获取DB(数据库）信息并
   返回给Servlet，Servlet转发给JSP（V），JSP翻译成Servlet，响应浏览器。
     在翻译的过程中,if标签怎么翻译成Java代码?（*）
     tomcat在翻译时看到if标签根据c找到taglib标签( <%@taglib uri= "" prefix = "c" %>)中的
   prefix,根据prefix找到uri，根据uri找到导入jar包中的c.tld文件，找到if标签，找到对应的类  
  （ifTag）。从而将调用这个类翻译成一句代码(ifTag.doTag()).
     --tomcat在翻译jsp时会翻译JSTL标签，它是将JSTL标签翻译成Servlet中的一句代码，就是调用
   该标签所对应的类的doTag()方法。
二 如何开发自定义标签(了解)
   step1:编写java类，继承SimpleTagSupport类
   step2:在doTag方法中添加处理逻辑
   step3:配置标签说明文件
   step4:自己写的.tld文件需要放在WEB_INF中      
  
三 进项目  
   1.netctoss名词解析
     net:网络
     c:China
     t:Telecom 电信
     o:Operation 运营
     s
     s
  2.导包
    1）jdbc:用maven搜ojdbc,选择10.2.4.0
    2）dbcp:用maven搜commons-dbcp,选择1.4
    3）javaee:导入tomcat自带的包
    4）jstl:用maven搜jstl,选择jstl-1.2
  netcoss和其他软件一样，也有权限管理功能，即不同的用户进来，能看到不同的功能（图标），所以此项目
补：

1.两个前提：
  1）浏览器访问服务器获取并加载一个网页整个过程中，包含多个请求。但我们只需要写一个，其他自动
       浏览器发送路径给服务器发送请求（第一次），服务器创建Servlet接收，处理完业务后转发给
    jsp文件，发送给浏览器。浏览器加载网页时若需要css，则对服务器发送请求（第二次）,若需要图
    片，则对服务器发送请求（第三次）。
  2）WEB-INF具有保护功能，放在其内部的资源受到保护，避免直接被访问，必须通过转发访问。
  
2.jsp要放在WEB-INF下的原因：
      若JSP不放在WEB-INF下，则别人可以直接访问它。由于我们采用MVC模式，JSP来源于Servlet,直
    接访问它会报错。将其放在WEB-INF下，就是要保护它，从而避免报错。
    
3.样式，图片等静态资源不能放在WEB-INF下的原因：
      静态资源是浏览器加载HTML时直接访问的，不存在转发，所以不能将他们放在WEB-INF下，否则就
    访问不到了。
  
4.加载图片不用../的原因：
      浏览器访问/findCost.do，获得一个网页，在加载此网页时要获得图片。此时是网页和图片之间的相对关系。该网页的访问路径是/netctoss/findCost.do /netctoss/images/logo.png。我们需站在浏览器的角度分析问题。
     
     
     
(两天项目后）  
day03:
一 异常处理
   任意一个异常不停往上抛，最终会抛给tomcat
   容器中声明式处理：
   step1:将异常抛给容器，但底层的错误提示不要返回给用户
   step2:在web.xml文件中配置错误处理页面节点。 
  
  <!-- 声明发生哪种异常时转发到哪个错误页面
       注：此处错误页面的路径应该写绝对路径，而tomcat会主动帮我们加上项目名，
           所以此处的绝对路径就不要自己写项目名了，避免重复 -->
  <!-- 1.按照异常类型声明 -->
  <error-page>
    <exception-type>java.lang.Exception</exception-type>
    <location>/WEB_INF/error.jsp</location>
  </error-page>
  <!-- 2.按照异常编号声明 -->
  <error-page>
    <error-code>404</error-code>
    <location>/WEB_INF/error.jsp</location>
  </error-page>
  <error-page>
    <error-code>405</error-code>
    <location>/WEB_INF/error.jsp</location>
  </error-page>
  <error-page>
    <error-code>500</error-code>
    <location>/WEB_INF/error.jsp</location>
  </error-page> 
  
二 Cookie（状态管理）和session简介
  1.业务场景
     登录时要记住帐号，在查询/增加/修改时显示此帐号
     
  2.前提条件
     浏览器与服务器是多对一的关系
     
  3.错误的做法
     将帐号存入以下对象中：
     --request:多个请求之间无法通过request共享数据，
                ---登录请求中将帐号存入request,在查询时换了新的request,数据丢失。
     --config:多个Servlet之间无法通过config共享数据
            ---登录Servlet将数据存入登录的config,查询时调用新的Servlet,换了config,数据丢失
     --context:只有一个对象，存储同名的数据有冲突
     
  4.正确的做法(*)
     使用cookie或session存储帐号:
     1）多个请求之间可以共享这两个对象中的数据（跨请求）
     2）多个Servlet之间可以共享着两个对象中的数据（跨Servlet）
     3）服务器会给每个浏览器创建一套cookie和一个session
  
  5.cookie与session的区别      （举例：理发办卡）
    cookie:保存在浏览器上，服务器压力小，但安全性低
    session:保存在服务器上，服务器压力大，但安全性高
  
  6.使用建议
    重要的数据存入session
    一般的数据存入cookie
  
三 Cookie  案例（登录保存帐号，主页显示帐号）
   浏览器发送请求访问，服务创建Servlet，new一个cookie保存帐号，发送给浏览器。
   浏览器再次访问服务器时，浏览器会主动传入cookie
  1.创建cookie并保存数据
     Cookie c1 = new Cookie(String name,String value);
     res.addCookie(c1);
     一个cookie只能存一份数据(key value),第一个参数为key,第二个参数为value.
     例：
       String code = req.getParameter("code");
       //验证通过后保存帐号
       Cookie c1 = new Cookie("code",code); 
       //将cookie发送给浏览器，浏览器会自动保存cookie将其存入浏览器的内部空间
       res.addCookie(c1);
       
  2.查询cookie 
     获取客户端所有的Cookie对象 
     Cookie[]   request.getCookies();
     获取一个Cookie对象
     遍历
     String  Cookie.getName();
     String  Cookie.getValue();
    例：
       //浏览器访问此Servlet前已经保存了cookie,在访问此Servlet时会自动传入cookie
       Cookie[] cookies = req.getCookies();
	if(cookies!=null){
	  res.setContentType("text/html；charset = utf-8");
	  PrintWriter out = res.getWriter();
	  for(Cookie c:cookies){
	    out.println(c.getName()+":"+c.getValue());
	  }
	}
	
  3.修改cookie
    step1:获取客户端发送的所有cookie
    step2:根据name找到要修改的cookie
    step3:调用cookie的setValue(String newValue)方法修改该cookie的值
    step4:将修改后的cookie加入到response发送回客户端
    例：
      Cookie[] cookies = req.getCookies();
	if(cookies!=null){
	  res.setContentType("text/html charset = utf-8");
	  PrintWriter out = res.getWriter();
	  for(Cookie c:cookies){
	    String name = c.getName();
	    if(name.equals("city"){
	      c.setValue("ShangHai");
	      res.addCookie(c);
	    }
	  }
	}
	
  4.cookie的生存时间
      默认情况下，浏览器将cookie存在内存中。只要浏览器不关闭，cookie就一直存在。关闭浏览器，
    cookie消失。若希望保存cookie，可以通过设置过期时间
    void Cookie.setMaxAge(int seconds);
    seconds大于0，浏览器将cookie存入硬盘，seconds等于0，删除cookie。
    例：c1.setMaxAge(60000);
  
  5.cookie的编码----只能保存ASCII码
    如果要保存中文，序将中文转换成合法的ASCII码，即编码
    例：
      Cookie c = new Cookie("city",URLEncoder.encode("北京"，"utf-8"));
     
    编码后的Cookie为了看到实际的中文，需要还原后再显示
    例：
      Cookie[] cookies = req.getCookies();
      if(cookies!=null){
	res.setContentType("text/html charset = utf-8");
	PrintWriter out = res.getWriter();
	for(Cookie c:cookies){
	 out.println(c.getName()+":"+URLDecoder.decode(c.getValue(),"utf-8"));
	} }

四 cookie的路径问题
  1.在/main/login下创建的cookie,只对/main及其下级路径有效
  2.可修改cookie的有效路径
    例：
      Cookie c1 = new Cookie("uname","Jack"); 
      c1.setPath("/jsp4"); (jsp4包括main和cost)
  3.cookie的限制
    1）cookie可以被用户禁止与删除
    2）cookie会将状态保存在浏览器前端，不安全。
    3）cookie只能保存少量数据，大约4kb左右。
    4）cookie的个数是有限制的
    5）cookie只能保存字符串
  
  
关于cookie的学习要点
 1.cookie的创建与获取方式
 2.cookie的生存时间和设置
 3.cookie中如何保存文件
 4.cookie的生效路径如何设置  
  
   EL默认从4个对象中取值：pageContext,request,session,application
    也可以从cookie中取值，方式：cookie.key.value
    例:<span>帐号：${cookie.adminCode.value }</span>
           
五 Session  案例（登录保存帐号，主页显示帐号）
   浏览器第一次发送请求访问，服务器会自动创建session并存入request对象中，每一个session都有一个id。服务器调用Servlet处理请求，通过request获取session。服务器响应时自动将session的id存入cookie中，并将cookie发送给浏览器（浏览器会自动保存cookie将其存入浏览器的内部空间)。
   浏览器第二次访问服务器，会自动传入cookie,tomcat会寻找session并存入request,调用Servlet,作出响应，请求结束。
  1.创建session  session已经由服务器创建 无需new一个
    例：
       String code = req.getParameter("code");
      	//将帐号存入session，给后续页面使用
	//1)session存到服务器的内存里
	//2）session中可以存任意类型的数据，包括中文
	//3）session对该项目内所有路径的请求都有效
	//4）此session就是jsp内置对象中的session
	HttpSession session = req.getSession();
	session.setAttribute("code", code);
     服务器响应时会自动创建一个cookie,并将session的id存入此cookie,再把cookie发送给浏览器。
  2.读取session
    例：
       //获取登录时就创建好了的session,并从中读取登录时所保存的数据
	HttpSession session = req.getSession();
	String code = (String)session.getAttribute("code");
	//输出给浏览器
	res.setContentType("text/html;charset = utf-8");
	PrintWriter out = res.getWriter();
	out.println(code);
	out.close();
dao04
  3.删除session
    session.invalidate();
  
  4.session超时  session检查周期为2~3分钟
    空闲时间过长的session会被删除，节省服务器内存空间资源。超时时间限制一般是30分钟
    修改超时时间：
    1）通过编程的方式修改
       session.setMaxInactiveInterval(int seconds)  秒为单位
       例：
    2）通过web.xml配置
       例：
         <session-config>
           <session-timeout>1</session-timeout>     分为单位
         </session-config>
         
 5.cookie禁用，session也不能用了。解决方案：URL重写
 
 6.session优缺点
   优点：
       --安全
       --session能够保存的数据类型更丰富，cookie只能保存字符串内
       --session能够保存更多的数据，cookie大约保存4kb
   缺点：
       --session保存在服务器端，占用服务器内存，如果用户量过大，会严重影响服务器端性能
 7.session学习要点
   如何获取session，如何存取数据
   如何配置session
   如何删除session
 
一 验证码
  1.验证码的作用：防止机器人的破坏性操作，可以使用验证码技术来防止恶意的发送数据
     验证码本质是一张动态产生的图片
     图片的内容会随着程序的运行而随机产生
     
  2.验证码的绘制
    1）画矩形（创建一个内存画板对象）
    2）画背景色（获取画笔，为画笔指定颜色，为画板设置背景色）
    3）画字符（靠顶部）（绘制一个随机的字符串)
    4）画干扰线（修改画笔颜色，绘制多条随机干扰线）
    5）发送（压缩图片并输出到客户端）
 3.验证码的验证流程
   请求带有验证码的页面时：
    1）通过img标签的src属性获取验证码图片
     例：<td><img src="createImg.do" onclick = "this.setAttribute('src','createImg.do?
         x='+Math.random())" alt="验证码" title="点击更换" /></td>  
    2）服务器端生成随机字符串，并绘制
    3）服务器端将生成的随机字符串绑定到session中
   提交表单及填写的验证码内容时：
    1）处理程序将session中绑定的正确验证码字符串取出来
    2）获取表单提交时填写的验证码的内容
    3）比较两者，根据结果作出判断
 
二 cookie和session的作用
  1.通俗的理解
    他们可以按照如下的规则来保存数据：
     --多个请求之间可以共用对象中的数据
     --多个Servlet之间可以共用对象中的数据
     --服务器会给每个浏览器单独创建一份对象
  2.专业的理解（背过）
     --HTTP协议是无状态协议（服务器没有记住浏览器）
     --cookie和session是用来管理状态的（让服务器记住浏览器）
     状态：用来证明浏览器访问过服务器的证据

三 过滤器（Filter）
     Serlvet2.3规范中定义的一种小型的，可插入的Web组件。用来拦截Servlet容器的请求和响应过
   程，以便查看，提取或以某种方式操作正在客户机和服务器之间交换的数据。
     --
  1.过滤器的作用（理发店的前台）
    用来处理项目中公共的业务，如：记录日志，过滤敏感词，登录检查等。
    公共业务：很多请求都有的业务
 
  2.过滤器的使用步骤：（与Servlet相似）
    1）创建一个类，实现Filter接口,在doFilter()方法中实现拦截处理逻辑
       实现的Filter接口有三个必须实现的方法：
       void init(FilterConfig config) 初始化-filter在tomcat启动时便创建，只能被初始化一次
       void doFilter(ServletRequest req,ServletResponse res，FilterChain chain)
         --Filter有tomcat自动调用，tomcat在接收到请求后，调用Servlet前调用Filter
         --tomcat在调用Filter前就会创建好request和response
         --tomcat实例化的是接口的实现类：
	    RequstFacade implements HttpServletRequest
	    HttpServletRequest extends ServletRequest  
	    因此可以转型，例：
              HttpServletRequest request = (HttpServletRequest)req;
	       HttpServletResponse response = (HttpServletResponse)res;
	       System.out.println("在前面记日志");
	       //请求继续，去向目标
	       chain.doFilter(req, res);//这句话很重要。没有会直接销毁。
	       System.out.println("在后面记日志");
       void destroy() 容器删除过滤器实例之前调用，只执行一次
       
    2）在web.xml中配置这个过滤器（与Servlet一样）
       例：
          <filter>
             <filter-name>log</filter-name>
             <filter-class>filter.LogFilter</filter-class>
          </filter>
          <filter-mapping>
             <filter-name>log</filter-name>
              <!-- 声明此Filter可以过滤哪些请求，即哪些请求需要交给它处理 
                   写它能过过滤的请求路径-->
             <url-pattern>/*</url-pattern>
          </filter-mapping>
 
  注：配置了多个Filter,他们调用的顺序以filter-mappping为准（在前的先调用chain.doFilter()前面的内容，后调用chain.doFilter()后面的内容）
 
  3.初始化配置
    1）在web.xml中的<filter>标签中的最后写初始化参数
       例：<init-param>
            <param-name>city</param-name>
            <param-value>北京</param-value>
           </init-param>
    2）在对应的Filter实例中写init()方法来读取参数
         String   config.getInitParameter("city");
        例：System.out.println(cfg.getInitParameter("city"));
 
四 监听器  就是事件
   监听器有tomcat自动实例化。
   只有三个对象有监听器：request session ServletContext
   Servlet规范红定义的一种特殊的组件，用来监听Servlet容器产生的事件并进行响应的处理
   容器产成的两大类事件：
     --声明周期相关的事件
     --变更定数据相关的事件
   如何编写监听器
   1）写一个类，根户监听的事件类型选择实现相应的监听器接口（6个）
   2）在监听器接口方法中，实现相应的监听处理逻辑。
   3）在web.xml文件中注册该监听器
      例：
        <!-- 声明监听器，tomcat会在事件发生时自动调用此监听器的方法 -->
        <listener>
           <listener-class>web.MyListener</listener-class>
        </listener>
  
1.在当前路径无法确定时，需要写绝对路径（项目名+网名）。
  
2.onclick="location.href='fee_add.html';  
  
3.在一个jsp插入另一个jsp的方法
   <%@include file = "../menu.jsp"%> 
   或
   <c:import url = "../menu.jsp"></c:import> 推荐 
   服务器在翻译index.jsp时，会连带翻译它所引入的menu.jsp，所以应该站在服务器的角度分析路径
    
  
  
